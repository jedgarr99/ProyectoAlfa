package Server;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.*;
import java.util.Random;
import java.util.*;
import java.util.HashMap;
import java.util.HashSet;
import java.net.*;
import java.io.*;

public class EnviadorDeMonstruos {

    //Adonde envio los monstruos, a mi mismo, yo soy el server
    private static final String url = ActiveMQConnection.DEFAULT_BROKER_URL;
    //private static final String url = "tcp://148.205.134.68:61616";


    private final int avgInterarrivalTime = 3000; // in ms

    private static final String subject = "MONSTRUOS";

    public HashMap<String, Integer> jugadores = new HashMap<String, Integer>();

    public ArrayList<int[]> coordenadasEnviadas = new ArrayList<int[]>();

    private DataInputStream in;



    public HashMap<String, Integer> getJugadores(){
        return jugadores;
    }


    public void enviaMonstruos() {
        MessageProducer messageProducer;
        TextMessage textMessage;
        //Integer[] coordenada;
        try {
            ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);
            Connection connection = connectionFactory.createConnection();
            connection.start();
            Session session = connection.createSession(false /*Transacter*/, Session.AUTO_ACKNOWLEDGE);

            while (true) {
                Random randomGenerator = new Random();
                int myRow = randomGenerator.nextInt(3);
                int myColumn = randomGenerator.nextInt(3);
                int[] estaCoordenada={myColumn,myRow};
                coordenadasEnviadas.add(estaCoordenada);


                Topic topic = session.createTopic(subject);
                messageProducer = session.createProducer(topic);
                textMessage = session.createTextMessage();
                textMessage.setText(myColumn + " " + myRow); // random number from 1 to 10 where 10 represents the worst news

                long delay = (long) (avgInterarrivalTime * (-Math.log(Math.random()))); //  Arrival process is Poisson Distributed
                try {
                    System.out.println("Sending " + textMessage.getText());
                    messageProducer.send(textMessage);
                    Thread.sleep(delay);

                } catch (Exception e) {
                    e.printStackTrace();
                }

                //Mensaje Final
                /*
                if ((i + 1) == maxNumberOfNews) {
                    for (int j = 0; j < newsTypes.length; j++) {
                        Topic innerTopic = session.createTopic(newsTypes[j]);
                        messageProducer = session.createProducer(innerTopic);
                        textMessage = session.createTextMessage();
                        textMessage.setText("The End");
                        System.out.println("Notifying the end of the financial session to " + newsTypes[j] + " Floor Brokers");
                        messageProducer.send(textMessage);
                    }
                }
                 */


                messageProducer.close();
            }
            //session.close();
            //connection.close();


        } catch (JMSException e) {
            e.printStackTrace();
        }
    }

public void startListeningTCP() {

    new Thread(() -> {
        try {
            int serverPort = 49152;
            ServerSocket listenSocket = new ServerSocket(serverPort);
            while (true) {
                System.out.println("Waiting for messages...");
                Socket clientSocket = listenSocket.accept();  // Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.
                in = new DataInputStream(clientSocket.getInputStream());

                new Thread(() -> {
                    try {
                        String data = in.readUTF();         // recibo solicitud

                        System.out.println("Message received from: " + clientSocket.getRemoteSocketAddress()+" "+data);

                        String jugadorQueEnvia=(" "+clientSocket.getRemoteSocketAddress()).substring(2,11);

                        if(!jugadores.containsKey(jugadorQueEnvia)){
                            jugadores.put(jugadorQueEnvia,0);
                            System.out.println("Jugador nuevo registrado:"+jugadorQueEnvia);
                        }

                        String[] arrOfStr = data.split("-", 2);

                        int  myColumn = Integer.parseInt(arrOfStr[0]);
                        int myRow = Integer.parseInt(arrOfStr[1]);
                        System.out.println(myColumn+" "+myRow);

                        int[] estaCoordenada={myColumn,myColumn};
                        //-----------corregir que sea la misma coordenada y concurrencia--------------
                        if(coordenadasEnviadas.contains(estaCoordenada)){
                            coordenadasEnviadas.remove(estaCoordenada);
                            int puntos= jugadores.get(jugadorQueEnvia);
                            puntos++;
                            jugadores.put(jugadorQueEnvia,puntos);
                            System.out.println("Nuevo puntaje para "+jugadorQueEnvia+" "+puntos);

                        }else{
                            System.out.println("coordenada no esta ");

                            /*Iterator itr = coordenadasEnviadas.iterator();

                            // check element is present or not. if not loop will
                            // break.
                            while (itr.hasNext()) {
                                System.out.println(itr.next());
                            }

                             */
                        }

                    } catch (EOFException e) {
                        System.out.println("EOF:" + e.getMessage());
                    } catch (IOException e) {
                        System.out.println("IO:" + e.getMessage());
                    } finally {
                        try {
                            clientSocket.close();
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    }

                }).start();





            }
        } catch (IOException e) {
            System.out.println("Listen :" + e.getMessage());
        }

    }).start();
}


    public static void main(String[] args) {
        EnviadorDeMonstruos sender = new EnviadorDeMonstruos();
        sender.startListeningTCP();
        sender.enviaMonstruos();
    }

}






